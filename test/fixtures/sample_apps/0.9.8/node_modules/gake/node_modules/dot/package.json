{
  "name": "dot",
  "description": "Concise and fast javascript templating compatible with nodejs and other javascript environments",
  "keywords": [
    "template",
    "fast",
    "simple",
    "templating"
  ],
  "version": "1.0.2",
  "main": "index",
  "bin": {
    "dottojs": "./bin/dot-packer"
  },
  "homepage": "http://github.com/olado/doT",
  "repository": {
    "type": "git",
    "url": "git://github.com/olado/doT.git"
  },
  "author": {
    "name": "Laura Doktorova",
    "email": "ldoktorova@gmail.com"
  },
  "engines": [
    "node >=0.2.6"
  ],
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {},
  "devDependencies": {
    "commander": "*",
    "uglify-js": "*",
    "mkdirp": "*",
    "mocha": "*",
    "jshint": "*"
  },
  "readme": "Created in search of the fastest and concise JavaScript templating function with emphasis on performance under V8 and nodejs. It shows great performance for both nodejs and browsers.\n\ndoT.js is fast, small and has no dependencies.\n\n## Features\n    custom delimiters\n    runtime evaluation\n    runtime interpolation\n    compile-time evaluation\n    partials support\n    conditionals support\n    array iterators\n    encoding\n    control whitespace - strip or preserve\n    streaming friendly\n    use it as logic-less or with logic, it is up to you\n\n## Docs, live playground and samples\n\nhttp://olado.github.com/doT (todo: update docs with new features added in version 1.0.0)\n\n## New in version 1.0.0\n\n####Added parameters support in partials\n\n\t{{##def.macro:param:\n\t\t<div>{{=param.foo}}</div>\n\t#}}\n\n\t{{#def.macro:myvariable}}\n\n####Node module now supports auto-compilation of dot templates from specified path\n\n\tvar dots = require(\"dot\").process({ path: \"./views\"});\n\nThis will compile .def, .dot, .jst files found under the specified path.\nDetails\n   * It ignores sub-directories.\n   * Template files can have multiple extensions at the same time.\n   * Files with .def extension can be included in other files via {{#def.name}}\n   * Files with .dot extension are compiled into functions with the same name and\n   can be accessed as renderer.filename\n   * Files with .jst extension are compiled into .js files. Produced .js file can be\n   loaded as a commonJS, AMD module, or just installed into a global variable (default is set to window.render)\n   * All inline defines defined in the .jst file are\n   compiled into separate functions and are available via _render.filename.definename\n \n   Basic usage:\n ```\n        var dots = require(\"dot\").process({path: \"./views\"});\n        dots.mytemplate({foo:\"hello world\"});\n ```\n   The above snippet will:\n\t* Compile all templates in views folder (.dot, .def, .jst)\n  \t* Place .js files compiled from .jst templates into the same folder\n     \t   These files can be used with require, i.e. require(\"./views/mytemplate\")\n  \t* Return an object with functions compiled from .dot templates as its properties\n  \t* Render mytemplate template\n \n####CLI tool to compile dot templates into js files\n\n\t./bin/dot-packer -s examples/views -d out/views\n\n## Notes\n    doU.js is here only so that legacy external tests do not break. Use doT.js.\n    doT.js with doT.templateSettings.append=false provides the same performance as doU.js.\n\n## Author\nLaura Doktorova @olado\n\n## License\ndoT is licensed under the MIT License. (See LICENSE-DOT)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/olado/doT/issues"
  },
  "_id": "dot@1.0.2",
  "_shasum": "0c6aadea63454cc8a7de99b6d6e9a01fda8ebd91",
  "_from": "dot@~1.0.2",
  "_resolved": "https://registry.npmjs.org/dot/-/dot-1.0.2.tgz"
}
