{
  "name": "validator",
  "description": "String validation and sanitization",
  "version": "3.3.0",
  "homepage": "http://github.com/chriso/validator.js",
  "keywords": [
    "validator",
    "validation",
    "validate",
    "sanitization",
    "sanitize",
    "sanitisation",
    "sanitise",
    "assert"
  ],
  "author": {
    "name": "Chris O'Hara",
    "email": "cohara87@gmail.com"
  },
  "main": "validator.js",
  "bugs": {
    "url": "http://github.com/chriso/validator.js/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/chriso/validator.js.git"
  },
  "scripts": {
    "test": "_mocha --reporter spec"
  },
  "devDependencies": {
    "mocha": "latest",
    "istanbul": "latest",
    "jshint": "latest",
    "uglify-js": "latest"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/chriso/validator.js/raw/master/LICENSE"
    }
  ],
  "readme": "**validator.js** is a library of string validators and sanitizers.\n\n![tests][travis]\n\n### Server-side usage\n\nInstall the library with `npm install validator`\n\n```javascript\nvar validator = require('validator');\n\nvalidator.isEmail('foo@bar.com'); //=> true\n```\n\n### Client-side usage\n\nThe library can be loaded as a script and supports [AMD][amd]\n\n```html\n<script type=\"text/javascript\" src=\"validator.min.js\"></script>\n<script type=\"text/javascript\">\n  validator.isEmail('foo@bar.com'); //=> true\n</script>\n```\n\nThe library can also be installed through [bower][bower]\n\n```bash\n$ bower install git@github.com:chriso/validator.js.git\n```\n\n### Validators\n\n- **equals(str, comparison)** - check if the string matches the comparison.\n- **contains(str, seed)** - check if the string contains the seed.\n- **matches(str, pattern [, modifiers])** - check if string matches the pattern. Either `matches('foo', /foo/i)` or `matches('foo', 'foo', 'i')`.\n- **isEmail(str)** - check if the string is an email.\n- **isURL(str [, options])** - check if the string is an URL. `options` is an object which defaults to `{ protocols: ['http','https','ftp'], require_tld: true }`.\n- **isIP(str [, version])** - check if the string is an IP (version 4 or 6).\n- **isAlpha(str)** - check if the string contains only letters (a-zA-Z).\n- **isNumeric(str)** - check if the string contains only numbers.\n- **isAlphanumeric(str)** - check if the string contains only letters and numbers.\n- **isHexadecimal(str)** - check if the string is a hexadecimal number.\n- **isHexColor(str)** - check if the string is a hexadecimal color.\n- **isLowercase(str)** - check if the string is lowercase.\n- **isUppercase(str)** - check if the string is uppercase.\n- **isInt(str)** - check if the string is an integer.\n- **isFloat(str)** - check if the string is a float.\n- **isDivisibleBy(str, number)** - check if the string is a number that's divisible by another.\n- **isNull(str)** - check if the string is null.\n- **isLength(str, min [, max])** - check if the string's length falls in a range.\n- **isUUID(str [, version])** - check if the string is a UUID (version 3, 4 or 5).\n- **isDate(str)** - check if the string is a date.\n- **isAfter(str [, date])** - check if the string is a date that's after the specified date (defaults to now).\n- **isBefore(str [, date])** - check if the string is a date that's before the specified date.\n- **isIn(str, values)** - check if the string is in a array of allowed values.\n- **isCreditCard(str)** - check if the string is a credit card.\n- **isISBN(str [, version])** - check if the string is an ISBN (version 10 or 13).\n\n### Sanitizers\n\n- **toString(input)** - convert the input to a string.\n- **toDate(input)** - convert the input to a date, or `null` if the input is not a date.\n- **toFloat(input)** - convert the input to a float, or `NaN` if the input is not a float.\n- **toInt(input [, radix])** - convert the input to an integer, or `NaN` if the input is not an integer.\n- **toBoolean(input [, strict])** - convert the input to a boolean. Everything except for `'0'`, `'false'` and `''` returns `true`. In strict mode only `'1'` and `'true'` return `true`.\n- **trim(input [, chars])** - trim characters (whitespace by default) from both sides of the input.\n- **ltrim(input [, chars])** - trim characters from the left-side of the input.\n- **rtrim(input [, chars])** - trim characters from the right-side of the input.\n- **escape(input)** - replace `<`, `>`, `&` and `\"` with HTML entities.\n- **whitelist(input, chars)** - remove characters that do not appear in the whitelist.\n- **blacklist(input, chars)** - remove characters that appear in the blacklist.\n\n### Strings only\n\nThis library validates and sanitizes **strings** only. All input will be coerced to a string using the following rules\n\n- Call the `toString` property if available.\n- Replace `null`, `undefined` or `NaN` with an empty string.\n- Everything else is coerced with `input + ''`.\n\n### Extensions\n\nYou can add your own validators using `validator.extend(name, fn)`\n\n```javascript\nvalidator.extend('isFinite', function (str) {\n    return isFinite(str);\n});\n```\n\nNote that the first argument will be automatically coerced to a string.\n\n### Deprecations\n\nVersion 3 of the library deprecated some functionality\n\n- **XSS sanitizer**: Here's [why][remove-xss]. Use [Google Caja][caja] instead.\n- **Entity encoding**: Use [fb55/entities][entities] or [substack/node-ent][node-ent].\n- **Validator chaining**: The API was too unintuitive. I'd prefer to let users create their own higher-level patterns from the provided building blocks.\n\nIf you're migrating from version `1.x` or `2.x`, check out the [migration guide](https://github.com/chriso/validator.js/wiki/Migrating-from-1.x-and-2.x).\n\n### Tests\n\n- `make test` - run the test suite.\n- `make test V=1` - run the test suite with added verbosity.\n- `make test TEST=pattern` - run tests that match a pattern.\n- `make coverage` - run a coverage analysis tool.\n- `make lint` - run a lint tool.\n\n### License (MIT)\n\nCopyright (c) 2014 Chris O'Hara <cohara87@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[travis]: https://api.travis-ci.org/chriso/validator.js.png?branch=master\n[amd]: http://requirejs.org/docs/whyamd.html\n[bower]: http://bower.io/\n[remove-xss]: https://github.com/chriso/validator.js/commit/2d5d6999541add350fb396ef02dc42ca3215049e\n[caja]: https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js\n[entities]: https://github.com/fb55/node-entities\n[node-ent]: https://github.com/substack/node-ent\n",
  "readmeFilename": "README.md",
  "_id": "validator@3.3.0",
  "_shasum": "1822194e0a46b11f8c23b18bc130efc560ad4d87",
  "_from": "validator@~3.3.0",
  "_resolved": "https://registry.npmjs.org/validator/-/validator-3.3.0.tgz"
}
